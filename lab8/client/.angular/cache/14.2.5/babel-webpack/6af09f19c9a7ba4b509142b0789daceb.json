{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, cloneDeep } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        defaultOptions = _a.defaultOptions,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(13));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _d = _a.refetchQueries,\n        refetchQueries = _d === void 0 ? [] : _d,\n        _e = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _e === void 0 ? false : _e,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _f = _a.fetchPolicy,\n        fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n        _g = _a.errorPolicy,\n        errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 14);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 15);\n            mutationId = this.generateMutationId();\n            _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n            mutation = this.cache.transformForLink(document);\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete && !isExecutionPatchIncrementalResult(result)) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var noConnection = removeConnectionDirectiveFromDocument(transformed);\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 16);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 17);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 18);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 19);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(20));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    options = cloneDeep(options);\n    var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n      if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n          if (incrementalResult.errors) {\n            graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n          }\n        });\n      }\n\n      var hasErrors = isNonEmptyArray(graphQLErrors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n\n      var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n\n      if (normalized.fetchPolicy !== \"standby\" && concastSources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return concast;\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"names":["__assign","__awaiter","__generator","invariant","InvariantError","equal","execute","isExecutionPatchIncrementalResult","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","cloneDeep","ApolloError","isApolloError","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","defaultOptions","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","create","mutationStore","stop","_this","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","_e","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_f","fetchPolicy","_g","errorPolicy","keepRootFields","context","mutationId","_h","document","mutationStoreValue","self","_j","label","generateMutationId","transform","transformForLink","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","getObservableFromLink","result","graphQLErrors","errors","storeResult","markMutationResult","removeOptimistic","subscribe","next","err","networkError","cacheWrites","skipCache","push","data","dataId","query","updateQueries_1","observableQuery","queryName","call","updater","get","diff","returnPartialData","optimistic","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","id","asQuery","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","fetchQuery","options","networkStatus","fetchQueryObservable","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","transformed","transformDocument","noConnection","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","shouldForceResolvers","defaultVars","definitions","map","def","kind","operation","add","doc","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","concat","JSON","stringify","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","byVariables_1","varJson_1","concast","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","slice","incremental","incrementalResult","apply","hasErrors","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","concastSources","fetchQueryByPolicy","cleanupCancelFn","reason","setTimeout","includedQueriesById","lastDiff","getDiff","results","batch","onWatchUpdated","watch","watcher","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["/Users/patrickloranger/Documents/uOttawa SEG/6. Fall 2022/SEG 3502/lab8/client/node_modules/@apollo/client/core/QueryManager.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, cloneDeep, } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(13));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 14);\n                        __DEV__ ? invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', 15);\n                        mutationId = this.generateMutationId();\n                        _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n                        mutation = this.cache.transformForLink(document);\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_j.sent());\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                        throw new ApolloError({\n                                            graphQLErrors: result.errors,\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === 'ignore' &&\n                                        graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: optimisticResponse ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        resolve(storeResult);\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            cacheWrites.push({\n                result: result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            mutation.refetchQueries ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.transform(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete && !(isExecutionPatchIncrementalResult(result))) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                            }\n                        }\n                        update(cache, result, {\n                            context: mutation.context,\n                            variables: mutation.variables,\n                        });\n                    }\n                    if (!skipCache && !mutation.keepRootFields) {\n                        cache.modify({\n                            id: 'ROOT_MUTATION',\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                __DEV__ && invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var noConnection = removeConnectionDirectiveFromDocument(transformed);\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) })\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: observable.query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.') : invariant(options.query, 16);\n        __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 17);\n        __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 18);\n        __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 19);\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(20));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc).document, false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (__DEV__ && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" &&\n                    fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = canonicalStringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.beforeNext(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        options = cloneDeep(options);\n        var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = isNonEmptyArray(result.errors)\n                ? result.errors.slice(0)\n                : [];\n            if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n                result.incremental.forEach(function (incrementalResult) {\n                    if (incrementalResult.errors) {\n                        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n                    }\n                });\n            }\n            var hasErrors = isNonEmptyArray(graphQLErrors);\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (normalized.fetchPolicy !== \"standby\" &&\n                concastSources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return concastSources;\n        };\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return concast;\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map;\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: optimistic && removeOptimistic || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo &&\n                        watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: this.transform(query).document,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (__DEV__ &&\n                !returnPartialData &&\n                !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (data && _this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 :\n            (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ? 1\n                : 2;\n        var resultsFromLink = function () { return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n            variables: variables,\n            context: context,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n        }); };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(readCache()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(queryInfo.getDiff()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}